{"id":"node_modules/ml-distance-euclidean/euclidean.js","dependencies":[{"name":"/home/arish/ML_JS/Code/Section 1_4/package.json","includedInParent":true,"mtime":1549691485639},{"name":"/home/arish/ML_JS/Code/Section 1_4/node_modules/ml-distance-euclidean/package.json","includedInParent":true,"mtime":1549691485607}],"generated":{"js":"'use strict';\n\nfunction squaredEuclidean(p, q) {\n    var d = 0;\n    for (var i = 0; i < p.length; i++) {\n        d += (p[i] - q[i]) * (p[i] - q[i]);\n    }\n    return d;\n}\n\nfunction euclidean(p, q) {\n    return Math.sqrt(squaredEuclidean(p, q));\n}\n\nmodule.exports = euclidean;\neuclidean.squared = squaredEuclidean;\n","map":{"mappings":[{"source":"node_modules/ml-distance-euclidean/euclidean.js","original":{"line":1,"column":0},"generated":{"line":1,"column":0}},{"source":"node_modules/ml-distance-euclidean/euclidean.js","original":{"line":2,"column":0},"generated":{"line":2,"column":0}},{"source":"node_modules/ml-distance-euclidean/euclidean.js","original":{"line":3,"column":0},"generated":{"line":3,"column":0}},{"source":"node_modules/ml-distance-euclidean/euclidean.js","original":{"line":4,"column":0},"generated":{"line":4,"column":0}},{"source":"node_modules/ml-distance-euclidean/euclidean.js","original":{"line":5,"column":0},"generated":{"line":5,"column":0}},{"source":"node_modules/ml-distance-euclidean/euclidean.js","original":{"line":6,"column":0},"generated":{"line":6,"column":0}},{"source":"node_modules/ml-distance-euclidean/euclidean.js","original":{"line":7,"column":0},"generated":{"line":7,"column":0}},{"source":"node_modules/ml-distance-euclidean/euclidean.js","original":{"line":8,"column":0},"generated":{"line":8,"column":0}},{"source":"node_modules/ml-distance-euclidean/euclidean.js","original":{"line":9,"column":0},"generated":{"line":9,"column":0}},{"source":"node_modules/ml-distance-euclidean/euclidean.js","original":{"line":10,"column":0},"generated":{"line":10,"column":0}},{"source":"node_modules/ml-distance-euclidean/euclidean.js","original":{"line":11,"column":0},"generated":{"line":11,"column":0}},{"source":"node_modules/ml-distance-euclidean/euclidean.js","original":{"line":12,"column":0},"generated":{"line":12,"column":0}},{"source":"node_modules/ml-distance-euclidean/euclidean.js","original":{"line":13,"column":0},"generated":{"line":13,"column":0}},{"source":"node_modules/ml-distance-euclidean/euclidean.js","original":{"line":14,"column":0},"generated":{"line":14,"column":0}},{"source":"node_modules/ml-distance-euclidean/euclidean.js","original":{"line":15,"column":0},"generated":{"line":15,"column":0}},{"source":"node_modules/ml-distance-euclidean/euclidean.js","original":{"line":16,"column":0},"generated":{"line":16,"column":0}},{"source":"node_modules/ml-distance-euclidean/euclidean.js","original":{"line":17,"column":0},"generated":{"line":17,"column":0}}],"sources":{"node_modules/ml-distance-euclidean/euclidean.js":"'use strict';\n\nfunction squaredEuclidean(p, q) {\n    var d = 0;\n    for (var i = 0; i < p.length; i++) {\n        d += (p[i] - q[i]) * (p[i] - q[i]);\n    }\n    return d;\n}\n\nfunction euclidean(p, q) {\n    return Math.sqrt(squaredEuclidean(p, q));\n}\n\nmodule.exports = euclidean;\neuclidean.squared = squaredEuclidean;\n"},"lineCount":17}},"hash":"4e04cefaa13beb88a7b3df9ac342ca22","cacheData":{"env":{}}}