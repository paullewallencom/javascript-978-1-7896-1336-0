{"id":"node_modules/ml-performance/src/index.js","dependencies":[{"name":"/home/arish/ML_JS/Code/Section2_5/package.json","includedInParent":true,"mtime":1550605094052},{"name":"/home/arish/ML_JS/Code/Section2_5/node_modules/ml-performance/package.json","includedInParent":true,"mtime":1550605094028},{"name":"./measures","loc":{"line":3,"column":25},"parent":"/home/arish/ML_JS/Code/Section2_5/node_modules/ml-performance/src/index.js","resolved":"/home/arish/ML_JS/Code/Section2_5/node_modules/ml-performance/src/measures.js"}],"generated":{"js":"'use strict';\n\nconst measures = require('./measures');\n\nclass Performance {\n    /**\n     *\n     * @param prediction - The prediction matrix\n     * @param target - The target matrix (values: truthy for same class, falsy for different class)\n     * @param options\n     *\n     * @option    all    True if the entire matrix must be used. False to ignore the diagonal and lower part (default is false, for similarity/distance matrices)\n     * @option    max    True if the max value corresponds to a perfect match (like in similarity matrices), false if it is the min value (default is false, like in distance matrices. All values will be multiplied by -1)\n     */\n    constructor(prediction, target, options) {\n        options = options || {};\n        if (prediction.length !== target.length || prediction[0].length !== target[0].length) {\n            throw new Error('dimensions of prediction and target do not match');\n        }\n        const rows = prediction.length;\n        const columns = prediction[0].length;\n        const isDistance = !options.max;\n\n        const predP = [];\n\n        if (options.all) {\n            for (var i = 0; i < rows; i++) {\n                for (var j = 0; j < columns; j++) {\n                    predP.push({\n                        pred: prediction[i][j],\n                        targ: target[i][j]\n                    });\n                }\n            }\n        } else {\n            if (rows < 3 || rows !== columns) {\n                throw new Error('When \"all\" option is false, the prediction matrix must be square and have at least 3 columns');\n            }\n            for (var i = 0; i < rows - 1; i++) {\n                for (var j = i + 1; j < columns; j++) {\n                    predP.push({\n                        pred: prediction[i][j],\n                        targ: target[i][j]\n                    });\n                }\n            }\n        }\n\n        if (isDistance) {\n            predP.sort((a, b) => a.pred - b.pred);\n        } else {\n            predP.sort((a, b) => b.pred - a.pred);\n        }\n        \n        const cutoffs = this.cutoffs = [isDistance ? Number.MIN_VALUE : Number.MAX_VALUE];\n        const fp = this.fp = [0];\n        const tp = this.tp = [0];\n\n        var nPos = 0;\n        var nNeg = 0;\n\n        var currentPred = predP[0].pred;\n        var nTp = 0;\n        var nFp = 0;\n        for (var i = 0; i < predP.length; i++) {\n            if (predP[i].pred !== currentPred) {\n                cutoffs.push(currentPred);\n                fp.push(nFp);\n                tp.push(nTp);\n                currentPred = predP[i].pred;\n            }\n            if (predP[i].targ) {\n                nPos++;\n                nTp++;\n            } else {\n                nNeg++;\n                nFp++;\n            }\n        }\n        cutoffs.push(currentPred);\n        fp.push(nFp);\n        tp.push(nTp);\n\n        const l = cutoffs.length;\n        const fn = this.fn = new Array(l);\n        const tn = this.tn = new Array(l);\n        const nPosPred = this.nPosPred = new Array(l);\n        const nNegPred = this.nNegPred = new Array(l);\n\n        for (var i = 0; i < l; i++) {\n            fn[i] = nPos - tp[i];\n            tn[i] = nNeg - fp[i];\n\n            nPosPred[i] = tp[i] + fp[i];\n            nNegPred[i] = tn[i] + fn[i];\n        }\n\n        this.nPos = nPos;\n        this.nNeg = nNeg;\n        this.nSamples = nPos + nNeg;\n    }\n\n    /**\n     * Computes a measure from the prediction object.\n     *\n     * Many measures are available and can be combined :\n     * To create a ROC curve, you need fpr and tpr\n     * To create a DET curve, you need fnr and fpr\n     * To create a Lift chart, you need rpp and lift\n     *\n     * Possible measures are : threshold (Threshold), acc (Accuracy), err (Error rate),\n     * fpr (False positive rate), tpr (True positive rate), fnr (False negative rate), tnr (True negative rate), ppv (Positive predictive value),\n     * npv (Negative predictive value), pcfall (Prediction-conditioned fallout), pcmiss (Prediction-conditioned miss), lift (Lift value), rpp (Rate of positive predictions), rnp (Rate of negative predictions)\n     *\n     * @param measure - The short name of the measure\n     *\n     * @return [number]\n     */\n    getMeasure(measure) {\n        if (typeof measure !== 'string') {\n            throw new Error('No measure specified');\n        }\n        if (!measures[measure]) {\n            throw new Error(`The specified measure (${measure}) does not exist`);\n        }\n        return measures[measure](this);\n    }\n\n    /**\n     * Returns the area under the ROC curve\n     */\n    getAURC() {\n        const l = this.cutoffs.length;\n        const x = new Array(l);\n        const y = new Array(l);\n        for (var i = 0; i < l; i++) {\n            x[i] = this.fp[i] / this.nNeg;\n            y[i] = this.tp[i] / this.nPos;\n        }\n        var auc = 0;\n        for (i = 1; i < l; i++) {\n            auc += 0.5 * (x[i] - x[i - 1]) * (y[i] + y[i - 1]);\n        }\n        return auc;\n    }\n\n    /**\n     * Returns the area under the DET curve\n     */\n    getAUDC() {\n        const l = this.cutoffs.length;\n        const x = new Array(l);\n        const y = new Array(l);\n        for (var i = 0; i < l; i++) {\n            x[i] = this.fn[i] / this.nPos;\n            y[i] = this.fp[i] / this.nNeg;\n        }\n        var auc = 0;\n        for (i = 1; i < l; i++) {\n            auc += 0.5 * (x[i] + x[i - 1]) * (y[i] - y[i - 1]);\n        }\n        return auc;\n    }\n\n    getDistribution(options) {\n        options = options || {};\n        var cutLength = this.cutoffs.length;\n        var cutLow = options.xMin || Math.floor(this.cutoffs[cutLength - 1] * 100) / 100;\n        var cutHigh = options.xMax || Math.ceil(this.cutoffs[1] * 100) / 100;\n        var interval = options.interval || Math.floor(((cutHigh - cutLow) / 20 * 10000000) - 1) / 10000000; // Trick to avoid the precision problem of float numbers\n\n        var xLabels = [];\n        var interValues = [];\n        var intraValues = [];\n        var interCumPercent = [];\n        var intraCumPercent = [];\n\n        var nTP = this.tp[cutLength - 1], currentTP = 0;\n        var nFP = this.fp[cutLength - 1], currentFP = 0;\n\n        for (var i = cutLow, j = (cutLength - 1); i <= cutHigh; i += interval) {\n            while (this.cutoffs[j] < i)\n                j--;\n\n            xLabels.push(i);\n\n            var thisTP = nTP - currentTP - this.tp[j];\n            var thisFP = nFP - currentFP - this.fp[j];\n\n            currentTP += thisTP;\n            currentFP += thisFP;\n\n            interValues.push(thisFP);\n            intraValues.push(thisTP);\n\n            interCumPercent.push(100 - (nFP - this.fp[j]) / nFP * 100);\n            intraCumPercent.push(100 - (nTP - this.tp[j]) / nTP * 100);\n        }\n\n        return {\n            xLabels: xLabels,\n            interValues: interValues,\n            intraValues: intraValues,\n            interCumPercent: interCumPercent,\n            intraCumPercent: intraCumPercent\n        };\n    }\n}\n\nPerformance.names = {\n    acc: 'Accuracy',\n    err: 'Error rate',\n    fpr: 'False positive rate',\n    tpr: 'True positive rate',\n    fnr: 'False negative rate',\n    tnr: 'True negative rate',\n    ppv: 'Positive predictive value',\n    npv: 'Negative predictive value',\n    pcfall: 'Prediction-conditioned fallout',\n    pcmiss: 'Prediction-conditioned miss',\n    lift: 'Lift value',\n    rpp: 'Rate of positive predictions',\n    rnp: 'Rate of negative predictions',\n    threshold: 'Threshold'\n};\n\nmodule.exports = Performance;\n","map":{"mappings":[{"source":"node_modules/ml-performance/src/index.js","original":{"line":1,"column":0},"generated":{"line":1,"column":0}},{"source":"node_modules/ml-performance/src/index.js","original":{"line":2,"column":0},"generated":{"line":2,"column":0}},{"source":"node_modules/ml-performance/src/index.js","original":{"line":3,"column":0},"generated":{"line":3,"column":0}},{"source":"node_modules/ml-performance/src/index.js","original":{"line":4,"column":0},"generated":{"line":4,"column":0}},{"source":"node_modules/ml-performance/src/index.js","original":{"line":5,"column":0},"generated":{"line":5,"column":0}},{"source":"node_modules/ml-performance/src/index.js","original":{"line":6,"column":0},"generated":{"line":6,"column":0}},{"source":"node_modules/ml-performance/src/index.js","original":{"line":7,"column":0},"generated":{"line":7,"column":0}},{"source":"node_modules/ml-performance/src/index.js","original":{"line":8,"column":0},"generated":{"line":8,"column":0}},{"source":"node_modules/ml-performance/src/index.js","original":{"line":9,"column":0},"generated":{"line":9,"column":0}},{"source":"node_modules/ml-performance/src/index.js","original":{"line":10,"column":0},"generated":{"line":10,"column":0}},{"source":"node_modules/ml-performance/src/index.js","original":{"line":11,"column":0},"generated":{"line":11,"column":0}},{"source":"node_modules/ml-performance/src/index.js","original":{"line":12,"column":0},"generated":{"line":12,"column":0}},{"source":"node_modules/ml-performance/src/index.js","original":{"line":13,"column":0},"generated":{"line":13,"column":0}},{"source":"node_modules/ml-performance/src/index.js","original":{"line":14,"column":0},"generated":{"line":14,"column":0}},{"source":"node_modules/ml-performance/src/index.js","original":{"line":15,"column":0},"generated":{"line":15,"column":0}},{"source":"node_modules/ml-performance/src/index.js","original":{"line":16,"column":0},"generated":{"line":16,"column":0}},{"source":"node_modules/ml-performance/src/index.js","original":{"line":17,"column":0},"generated":{"line":17,"column":0}},{"source":"node_modules/ml-performance/src/index.js","original":{"line":18,"column":0},"generated":{"line":18,"column":0}},{"source":"node_modules/ml-performance/src/index.js","original":{"line":19,"column":0},"generated":{"line":19,"column":0}},{"source":"node_modules/ml-performance/src/index.js","original":{"line":20,"column":0},"generated":{"line":20,"column":0}},{"source":"node_modules/ml-performance/src/index.js","original":{"line":21,"column":0},"generated":{"line":21,"column":0}},{"source":"node_modules/ml-performance/src/index.js","original":{"line":22,"column":0},"generated":{"line":22,"column":0}},{"source":"node_modules/ml-performance/src/index.js","original":{"line":23,"column":0},"generated":{"line":23,"column":0}},{"source":"node_modules/ml-performance/src/index.js","original":{"line":24,"column":0},"generated":{"line":24,"column":0}},{"source":"node_modules/ml-performance/src/index.js","original":{"line":25,"column":0},"generated":{"line":25,"column":0}},{"source":"node_modules/ml-performance/src/index.js","original":{"line":26,"column":0},"generated":{"line":26,"column":0}},{"source":"node_modules/ml-performance/src/index.js","original":{"line":27,"column":0},"generated":{"line":27,"column":0}},{"source":"node_modules/ml-performance/src/index.js","original":{"line":28,"column":0},"generated":{"line":28,"column":0}},{"source":"node_modules/ml-performance/src/index.js","original":{"line":29,"column":0},"generated":{"line":29,"column":0}},{"source":"node_modules/ml-performance/src/index.js","original":{"line":30,"column":0},"generated":{"line":30,"column":0}},{"source":"node_modules/ml-performance/src/index.js","original":{"line":31,"column":0},"generated":{"line":31,"column":0}},{"source":"node_modules/ml-performance/src/index.js","original":{"line":32,"column":0},"generated":{"line":32,"column":0}},{"source":"node_modules/ml-performance/src/index.js","original":{"line":33,"column":0},"generated":{"line":33,"column":0}},{"source":"node_modules/ml-performance/src/index.js","original":{"line":34,"column":0},"generated":{"line":34,"column":0}},{"source":"node_modules/ml-performance/src/index.js","original":{"line":35,"column":0},"generated":{"line":35,"column":0}},{"source":"node_modules/ml-performance/src/index.js","original":{"line":36,"column":0},"generated":{"line":36,"column":0}},{"source":"node_modules/ml-performance/src/index.js","original":{"line":37,"column":0},"generated":{"line":37,"column":0}},{"source":"node_modules/ml-performance/src/index.js","original":{"line":38,"column":0},"generated":{"line":38,"column":0}},{"source":"node_modules/ml-performance/src/index.js","original":{"line":39,"column":0},"generated":{"line":39,"column":0}},{"source":"node_modules/ml-performance/src/index.js","original":{"line":40,"column":0},"generated":{"line":40,"column":0}},{"source":"node_modules/ml-performance/src/index.js","original":{"line":41,"column":0},"generated":{"line":41,"column":0}},{"source":"node_modules/ml-performance/src/index.js","original":{"line":42,"column":0},"generated":{"line":42,"column":0}},{"source":"node_modules/ml-performance/src/index.js","original":{"line":43,"column":0},"generated":{"line":43,"column":0}},{"source":"node_modules/ml-performance/src/index.js","original":{"line":44,"column":0},"generated":{"line":44,"column":0}},{"source":"node_modules/ml-performance/src/index.js","original":{"line":45,"column":0},"generated":{"line":45,"column":0}},{"source":"node_modules/ml-performance/src/index.js","original":{"line":46,"column":0},"generated":{"line":46,"column":0}},{"source":"node_modules/ml-performance/src/index.js","original":{"line":47,"column":0},"generated":{"line":47,"column":0}},{"source":"node_modules/ml-performance/src/index.js","original":{"line":48,"column":0},"generated":{"line":48,"column":0}},{"source":"node_modules/ml-performance/src/index.js","original":{"line":49,"column":0},"generated":{"line":49,"column":0}},{"source":"node_modules/ml-performance/src/index.js","original":{"line":50,"column":0},"generated":{"line":50,"column":0}},{"source":"node_modules/ml-performance/src/index.js","original":{"line":51,"column":0},"generated":{"line":51,"column":0}},{"source":"node_modules/ml-performance/src/index.js","original":{"line":52,"column":0},"generated":{"line":52,"column":0}},{"source":"node_modules/ml-performance/src/index.js","original":{"line":53,"column":0},"generated":{"line":53,"column":0}},{"source":"node_modules/ml-performance/src/index.js","original":{"line":54,"column":0},"generated":{"line":54,"column":0}},{"source":"node_modules/ml-performance/src/index.js","original":{"line":55,"column":0},"generated":{"line":55,"column":0}},{"source":"node_modules/ml-performance/src/index.js","original":{"line":56,"column":0},"generated":{"line":56,"column":0}},{"source":"node_modules/ml-performance/src/index.js","original":{"line":57,"column":0},"generated":{"line":57,"column":0}},{"source":"node_modules/ml-performance/src/index.js","original":{"line":58,"column":0},"generated":{"line":58,"column":0}},{"source":"node_modules/ml-performance/src/index.js","original":{"line":59,"column":0},"generated":{"line":59,"column":0}},{"source":"node_modules/ml-performance/src/index.js","original":{"line":60,"column":0},"generated":{"line":60,"column":0}},{"source":"node_modules/ml-performance/src/index.js","original":{"line":61,"column":0},"generated":{"line":61,"column":0}},{"source":"node_modules/ml-performance/src/index.js","original":{"line":62,"column":0},"generated":{"line":62,"column":0}},{"source":"node_modules/ml-performance/src/index.js","original":{"line":63,"column":0},"generated":{"line":63,"column":0}},{"source":"node_modules/ml-performance/src/index.js","original":{"line":64,"column":0},"generated":{"line":64,"column":0}},{"source":"node_modules/ml-performance/src/index.js","original":{"line":65,"column":0},"generated":{"line":65,"column":0}},{"source":"node_modules/ml-performance/src/index.js","original":{"line":66,"column":0},"generated":{"line":66,"column":0}},{"source":"node_modules/ml-performance/src/index.js","original":{"line":67,"column":0},"generated":{"line":67,"column":0}},{"source":"node_modules/ml-performance/src/index.js","original":{"line":68,"column":0},"generated":{"line":68,"column":0}},{"source":"node_modules/ml-performance/src/index.js","original":{"line":69,"column":0},"generated":{"line":69,"column":0}},{"source":"node_modules/ml-performance/src/index.js","original":{"line":70,"column":0},"generated":{"line":70,"column":0}},{"source":"node_modules/ml-performance/src/index.js","original":{"line":71,"column":0},"generated":{"line":71,"column":0}},{"source":"node_modules/ml-performance/src/index.js","original":{"line":72,"column":0},"generated":{"line":72,"column":0}},{"source":"node_modules/ml-performance/src/index.js","original":{"line":73,"column":0},"generated":{"line":73,"column":0}},{"source":"node_modules/ml-performance/src/index.js","original":{"line":74,"column":0},"generated":{"line":74,"column":0}},{"source":"node_modules/ml-performance/src/index.js","original":{"line":75,"column":0},"generated":{"line":75,"column":0}},{"source":"node_modules/ml-performance/src/index.js","original":{"line":76,"column":0},"generated":{"line":76,"column":0}},{"source":"node_modules/ml-performance/src/index.js","original":{"line":77,"column":0},"generated":{"line":77,"column":0}},{"source":"node_modules/ml-performance/src/index.js","original":{"line":78,"column":0},"generated":{"line":78,"column":0}},{"source":"node_modules/ml-performance/src/index.js","original":{"line":79,"column":0},"generated":{"line":79,"column":0}},{"source":"node_modules/ml-performance/src/index.js","original":{"line":80,"column":0},"generated":{"line":80,"column":0}},{"source":"node_modules/ml-performance/src/index.js","original":{"line":81,"column":0},"generated":{"line":81,"column":0}},{"source":"node_modules/ml-performance/src/index.js","original":{"line":82,"column":0},"generated":{"line":82,"column":0}},{"source":"node_modules/ml-performance/src/index.js","original":{"line":83,"column":0},"generated":{"line":83,"column":0}},{"source":"node_modules/ml-performance/src/index.js","original":{"line":84,"column":0},"generated":{"line":84,"column":0}},{"source":"node_modules/ml-performance/src/index.js","original":{"line":85,"column":0},"generated":{"line":85,"column":0}},{"source":"node_modules/ml-performance/src/index.js","original":{"line":86,"column":0},"generated":{"line":86,"column":0}},{"source":"node_modules/ml-performance/src/index.js","original":{"line":87,"column":0},"generated":{"line":87,"column":0}},{"source":"node_modules/ml-performance/src/index.js","original":{"line":88,"column":0},"generated":{"line":88,"column":0}},{"source":"node_modules/ml-performance/src/index.js","original":{"line":89,"column":0},"generated":{"line":89,"column":0}},{"source":"node_modules/ml-performance/src/index.js","original":{"line":90,"column":0},"generated":{"line":90,"column":0}},{"source":"node_modules/ml-performance/src/index.js","original":{"line":91,"column":0},"generated":{"line":91,"column":0}},{"source":"node_modules/ml-performance/src/index.js","original":{"line":92,"column":0},"generated":{"line":92,"column":0}},{"source":"node_modules/ml-performance/src/index.js","original":{"line":93,"column":0},"generated":{"line":93,"column":0}},{"source":"node_modules/ml-performance/src/index.js","original":{"line":94,"column":0},"generated":{"line":94,"column":0}},{"source":"node_modules/ml-performance/src/index.js","original":{"line":95,"column":0},"generated":{"line":95,"column":0}},{"source":"node_modules/ml-performance/src/index.js","original":{"line":96,"column":0},"generated":{"line":96,"column":0}},{"source":"node_modules/ml-performance/src/index.js","original":{"line":97,"column":0},"generated":{"line":97,"column":0}},{"source":"node_modules/ml-performance/src/index.js","original":{"line":98,"column":0},"generated":{"line":98,"column":0}},{"source":"node_modules/ml-performance/src/index.js","original":{"line":99,"column":0},"generated":{"line":99,"column":0}},{"source":"node_modules/ml-performance/src/index.js","original":{"line":100,"column":0},"generated":{"line":100,"column":0}},{"source":"node_modules/ml-performance/src/index.js","original":{"line":101,"column":0},"generated":{"line":101,"column":0}},{"source":"node_modules/ml-performance/src/index.js","original":{"line":102,"column":0},"generated":{"line":102,"column":0}},{"source":"node_modules/ml-performance/src/index.js","original":{"line":103,"column":0},"generated":{"line":103,"column":0}},{"source":"node_modules/ml-performance/src/index.js","original":{"line":104,"column":0},"generated":{"line":104,"column":0}},{"source":"node_modules/ml-performance/src/index.js","original":{"line":105,"column":0},"generated":{"line":105,"column":0}},{"source":"node_modules/ml-performance/src/index.js","original":{"line":106,"column":0},"generated":{"line":106,"column":0}},{"source":"node_modules/ml-performance/src/index.js","original":{"line":107,"column":0},"generated":{"line":107,"column":0}},{"source":"node_modules/ml-performance/src/index.js","original":{"line":108,"column":0},"generated":{"line":108,"column":0}},{"source":"node_modules/ml-performance/src/index.js","original":{"line":109,"column":0},"generated":{"line":109,"column":0}},{"source":"node_modules/ml-performance/src/index.js","original":{"line":110,"column":0},"generated":{"line":110,"column":0}},{"source":"node_modules/ml-performance/src/index.js","original":{"line":111,"column":0},"generated":{"line":111,"column":0}},{"source":"node_modules/ml-performance/src/index.js","original":{"line":112,"column":0},"generated":{"line":112,"column":0}},{"source":"node_modules/ml-performance/src/index.js","original":{"line":113,"column":0},"generated":{"line":113,"column":0}},{"source":"node_modules/ml-performance/src/index.js","original":{"line":114,"column":0},"generated":{"line":114,"column":0}},{"source":"node_modules/ml-performance/src/index.js","original":{"line":115,"column":0},"generated":{"line":115,"column":0}},{"source":"node_modules/ml-performance/src/index.js","original":{"line":116,"column":0},"generated":{"line":116,"column":0}},{"source":"node_modules/ml-performance/src/index.js","original":{"line":117,"column":0},"generated":{"line":117,"column":0}},{"source":"node_modules/ml-performance/src/index.js","original":{"line":118,"column":0},"generated":{"line":118,"column":0}},{"source":"node_modules/ml-performance/src/index.js","original":{"line":119,"column":0},"generated":{"line":119,"column":0}},{"source":"node_modules/ml-performance/src/index.js","original":{"line":120,"column":0},"generated":{"line":120,"column":0}},{"source":"node_modules/ml-performance/src/index.js","original":{"line":121,"column":0},"generated":{"line":121,"column":0}},{"source":"node_modules/ml-performance/src/index.js","original":{"line":122,"column":0},"generated":{"line":122,"column":0}},{"source":"node_modules/ml-performance/src/index.js","original":{"line":123,"column":0},"generated":{"line":123,"column":0}},{"source":"node_modules/ml-performance/src/index.js","original":{"line":124,"column":0},"generated":{"line":124,"column":0}},{"source":"node_modules/ml-performance/src/index.js","original":{"line":125,"column":0},"generated":{"line":125,"column":0}},{"source":"node_modules/ml-performance/src/index.js","original":{"line":126,"column":0},"generated":{"line":126,"column":0}},{"source":"node_modules/ml-performance/src/index.js","original":{"line":127,"column":0},"generated":{"line":127,"column":0}},{"source":"node_modules/ml-performance/src/index.js","original":{"line":128,"column":0},"generated":{"line":128,"column":0}},{"source":"node_modules/ml-performance/src/index.js","original":{"line":129,"column":0},"generated":{"line":129,"column":0}},{"source":"node_modules/ml-performance/src/index.js","original":{"line":130,"column":0},"generated":{"line":130,"column":0}},{"source":"node_modules/ml-performance/src/index.js","original":{"line":131,"column":0},"generated":{"line":131,"column":0}},{"source":"node_modules/ml-performance/src/index.js","original":{"line":132,"column":0},"generated":{"line":132,"column":0}},{"source":"node_modules/ml-performance/src/index.js","original":{"line":133,"column":0},"generated":{"line":133,"column":0}},{"source":"node_modules/ml-performance/src/index.js","original":{"line":134,"column":0},"generated":{"line":134,"column":0}},{"source":"node_modules/ml-performance/src/index.js","original":{"line":135,"column":0},"generated":{"line":135,"column":0}},{"source":"node_modules/ml-performance/src/index.js","original":{"line":136,"column":0},"generated":{"line":136,"column":0}},{"source":"node_modules/ml-performance/src/index.js","original":{"line":137,"column":0},"generated":{"line":137,"column":0}},{"source":"node_modules/ml-performance/src/index.js","original":{"line":138,"column":0},"generated":{"line":138,"column":0}},{"source":"node_modules/ml-performance/src/index.js","original":{"line":139,"column":0},"generated":{"line":139,"column":0}},{"source":"node_modules/ml-performance/src/index.js","original":{"line":140,"column":0},"generated":{"line":140,"column":0}},{"source":"node_modules/ml-performance/src/index.js","original":{"line":141,"column":0},"generated":{"line":141,"column":0}},{"source":"node_modules/ml-performance/src/index.js","original":{"line":142,"column":0},"generated":{"line":142,"column":0}},{"source":"node_modules/ml-performance/src/index.js","original":{"line":143,"column":0},"generated":{"line":143,"column":0}},{"source":"node_modules/ml-performance/src/index.js","original":{"line":144,"column":0},"generated":{"line":144,"column":0}},{"source":"node_modules/ml-performance/src/index.js","original":{"line":145,"column":0},"generated":{"line":145,"column":0}},{"source":"node_modules/ml-performance/src/index.js","original":{"line":146,"column":0},"generated":{"line":146,"column":0}},{"source":"node_modules/ml-performance/src/index.js","original":{"line":147,"column":0},"generated":{"line":147,"column":0}},{"source":"node_modules/ml-performance/src/index.js","original":{"line":148,"column":0},"generated":{"line":148,"column":0}},{"source":"node_modules/ml-performance/src/index.js","original":{"line":149,"column":0},"generated":{"line":149,"column":0}},{"source":"node_modules/ml-performance/src/index.js","original":{"line":150,"column":0},"generated":{"line":150,"column":0}},{"source":"node_modules/ml-performance/src/index.js","original":{"line":151,"column":0},"generated":{"line":151,"column":0}},{"source":"node_modules/ml-performance/src/index.js","original":{"line":152,"column":0},"generated":{"line":152,"column":0}},{"source":"node_modules/ml-performance/src/index.js","original":{"line":153,"column":0},"generated":{"line":153,"column":0}},{"source":"node_modules/ml-performance/src/index.js","original":{"line":154,"column":0},"generated":{"line":154,"column":0}},{"source":"node_modules/ml-performance/src/index.js","original":{"line":155,"column":0},"generated":{"line":155,"column":0}},{"source":"node_modules/ml-performance/src/index.js","original":{"line":156,"column":0},"generated":{"line":156,"column":0}},{"source":"node_modules/ml-performance/src/index.js","original":{"line":157,"column":0},"generated":{"line":157,"column":0}},{"source":"node_modules/ml-performance/src/index.js","original":{"line":158,"column":0},"generated":{"line":158,"column":0}},{"source":"node_modules/ml-performance/src/index.js","original":{"line":159,"column":0},"generated":{"line":159,"column":0}},{"source":"node_modules/ml-performance/src/index.js","original":{"line":160,"column":0},"generated":{"line":160,"column":0}},{"source":"node_modules/ml-performance/src/index.js","original":{"line":161,"column":0},"generated":{"line":161,"column":0}},{"source":"node_modules/ml-performance/src/index.js","original":{"line":162,"column":0},"generated":{"line":162,"column":0}},{"source":"node_modules/ml-performance/src/index.js","original":{"line":163,"column":0},"generated":{"line":163,"column":0}},{"source":"node_modules/ml-performance/src/index.js","original":{"line":164,"column":0},"generated":{"line":164,"column":0}},{"source":"node_modules/ml-performance/src/index.js","original":{"line":165,"column":0},"generated":{"line":165,"column":0}},{"source":"node_modules/ml-performance/src/index.js","original":{"line":166,"column":0},"generated":{"line":166,"column":0}},{"source":"node_modules/ml-performance/src/index.js","original":{"line":167,"column":0},"generated":{"line":167,"column":0}},{"source":"node_modules/ml-performance/src/index.js","original":{"line":168,"column":0},"generated":{"line":168,"column":0}},{"source":"node_modules/ml-performance/src/index.js","original":{"line":169,"column":0},"generated":{"line":169,"column":0}},{"source":"node_modules/ml-performance/src/index.js","original":{"line":170,"column":0},"generated":{"line":170,"column":0}},{"source":"node_modules/ml-performance/src/index.js","original":{"line":171,"column":0},"generated":{"line":171,"column":0}},{"source":"node_modules/ml-performance/src/index.js","original":{"line":172,"column":0},"generated":{"line":172,"column":0}},{"source":"node_modules/ml-performance/src/index.js","original":{"line":173,"column":0},"generated":{"line":173,"column":0}},{"source":"node_modules/ml-performance/src/index.js","original":{"line":174,"column":0},"generated":{"line":174,"column":0}},{"source":"node_modules/ml-performance/src/index.js","original":{"line":175,"column":0},"generated":{"line":175,"column":0}},{"source":"node_modules/ml-performance/src/index.js","original":{"line":176,"column":0},"generated":{"line":176,"column":0}},{"source":"node_modules/ml-performance/src/index.js","original":{"line":177,"column":0},"generated":{"line":177,"column":0}},{"source":"node_modules/ml-performance/src/index.js","original":{"line":178,"column":0},"generated":{"line":178,"column":0}},{"source":"node_modules/ml-performance/src/index.js","original":{"line":179,"column":0},"generated":{"line":179,"column":0}},{"source":"node_modules/ml-performance/src/index.js","original":{"line":180,"column":0},"generated":{"line":180,"column":0}},{"source":"node_modules/ml-performance/src/index.js","original":{"line":181,"column":0},"generated":{"line":181,"column":0}},{"source":"node_modules/ml-performance/src/index.js","original":{"line":182,"column":0},"generated":{"line":182,"column":0}},{"source":"node_modules/ml-performance/src/index.js","original":{"line":183,"column":0},"generated":{"line":183,"column":0}},{"source":"node_modules/ml-performance/src/index.js","original":{"line":184,"column":0},"generated":{"line":184,"column":0}},{"source":"node_modules/ml-performance/src/index.js","original":{"line":185,"column":0},"generated":{"line":185,"column":0}},{"source":"node_modules/ml-performance/src/index.js","original":{"line":186,"column":0},"generated":{"line":186,"column":0}},{"source":"node_modules/ml-performance/src/index.js","original":{"line":187,"column":0},"generated":{"line":187,"column":0}},{"source":"node_modules/ml-performance/src/index.js","original":{"line":188,"column":0},"generated":{"line":188,"column":0}},{"source":"node_modules/ml-performance/src/index.js","original":{"line":189,"column":0},"generated":{"line":189,"column":0}},{"source":"node_modules/ml-performance/src/index.js","original":{"line":190,"column":0},"generated":{"line":190,"column":0}},{"source":"node_modules/ml-performance/src/index.js","original":{"line":191,"column":0},"generated":{"line":191,"column":0}},{"source":"node_modules/ml-performance/src/index.js","original":{"line":192,"column":0},"generated":{"line":192,"column":0}},{"source":"node_modules/ml-performance/src/index.js","original":{"line":193,"column":0},"generated":{"line":193,"column":0}},{"source":"node_modules/ml-performance/src/index.js","original":{"line":194,"column":0},"generated":{"line":194,"column":0}},{"source":"node_modules/ml-performance/src/index.js","original":{"line":195,"column":0},"generated":{"line":195,"column":0}},{"source":"node_modules/ml-performance/src/index.js","original":{"line":196,"column":0},"generated":{"line":196,"column":0}},{"source":"node_modules/ml-performance/src/index.js","original":{"line":197,"column":0},"generated":{"line":197,"column":0}},{"source":"node_modules/ml-performance/src/index.js","original":{"line":198,"column":0},"generated":{"line":198,"column":0}},{"source":"node_modules/ml-performance/src/index.js","original":{"line":199,"column":0},"generated":{"line":199,"column":0}},{"source":"node_modules/ml-performance/src/index.js","original":{"line":200,"column":0},"generated":{"line":200,"column":0}},{"source":"node_modules/ml-performance/src/index.js","original":{"line":201,"column":0},"generated":{"line":201,"column":0}},{"source":"node_modules/ml-performance/src/index.js","original":{"line":202,"column":0},"generated":{"line":202,"column":0}},{"source":"node_modules/ml-performance/src/index.js","original":{"line":203,"column":0},"generated":{"line":203,"column":0}},{"source":"node_modules/ml-performance/src/index.js","original":{"line":204,"column":0},"generated":{"line":204,"column":0}},{"source":"node_modules/ml-performance/src/index.js","original":{"line":205,"column":0},"generated":{"line":205,"column":0}},{"source":"node_modules/ml-performance/src/index.js","original":{"line":206,"column":0},"generated":{"line":206,"column":0}},{"source":"node_modules/ml-performance/src/index.js","original":{"line":207,"column":0},"generated":{"line":207,"column":0}},{"source":"node_modules/ml-performance/src/index.js","original":{"line":208,"column":0},"generated":{"line":208,"column":0}},{"source":"node_modules/ml-performance/src/index.js","original":{"line":209,"column":0},"generated":{"line":209,"column":0}},{"source":"node_modules/ml-performance/src/index.js","original":{"line":210,"column":0},"generated":{"line":210,"column":0}},{"source":"node_modules/ml-performance/src/index.js","original":{"line":211,"column":0},"generated":{"line":211,"column":0}},{"source":"node_modules/ml-performance/src/index.js","original":{"line":212,"column":0},"generated":{"line":212,"column":0}},{"source":"node_modules/ml-performance/src/index.js","original":{"line":213,"column":0},"generated":{"line":213,"column":0}},{"source":"node_modules/ml-performance/src/index.js","original":{"line":214,"column":0},"generated":{"line":214,"column":0}},{"source":"node_modules/ml-performance/src/index.js","original":{"line":215,"column":0},"generated":{"line":215,"column":0}},{"source":"node_modules/ml-performance/src/index.js","original":{"line":216,"column":0},"generated":{"line":216,"column":0}},{"source":"node_modules/ml-performance/src/index.js","original":{"line":217,"column":0},"generated":{"line":217,"column":0}},{"source":"node_modules/ml-performance/src/index.js","original":{"line":218,"column":0},"generated":{"line":218,"column":0}},{"source":"node_modules/ml-performance/src/index.js","original":{"line":219,"column":0},"generated":{"line":219,"column":0}},{"source":"node_modules/ml-performance/src/index.js","original":{"line":220,"column":0},"generated":{"line":220,"column":0}},{"source":"node_modules/ml-performance/src/index.js","original":{"line":221,"column":0},"generated":{"line":221,"column":0}},{"source":"node_modules/ml-performance/src/index.js","original":{"line":222,"column":0},"generated":{"line":222,"column":0}},{"source":"node_modules/ml-performance/src/index.js","original":{"line":223,"column":0},"generated":{"line":223,"column":0}},{"source":"node_modules/ml-performance/src/index.js","original":{"line":224,"column":0},"generated":{"line":224,"column":0}},{"source":"node_modules/ml-performance/src/index.js","original":{"line":225,"column":0},"generated":{"line":225,"column":0}},{"source":"node_modules/ml-performance/src/index.js","original":{"line":226,"column":0},"generated":{"line":226,"column":0}},{"source":"node_modules/ml-performance/src/index.js","original":{"line":227,"column":0},"generated":{"line":227,"column":0}},{"source":"node_modules/ml-performance/src/index.js","original":{"line":228,"column":0},"generated":{"line":228,"column":0}}],"sources":{"node_modules/ml-performance/src/index.js":"'use strict';\n\nconst measures = require('./measures');\n\nclass Performance {\n    /**\n     *\n     * @param prediction - The prediction matrix\n     * @param target - The target matrix (values: truthy for same class, falsy for different class)\n     * @param options\n     *\n     * @option    all    True if the entire matrix must be used. False to ignore the diagonal and lower part (default is false, for similarity/distance matrices)\n     * @option    max    True if the max value corresponds to a perfect match (like in similarity matrices), false if it is the min value (default is false, like in distance matrices. All values will be multiplied by -1)\n     */\n    constructor(prediction, target, options) {\n        options = options || {};\n        if (prediction.length !== target.length || prediction[0].length !== target[0].length) {\n            throw new Error('dimensions of prediction and target do not match');\n        }\n        const rows = prediction.length;\n        const columns = prediction[0].length;\n        const isDistance = !options.max;\n\n        const predP = [];\n\n        if (options.all) {\n            for (var i = 0; i < rows; i++) {\n                for (var j = 0; j < columns; j++) {\n                    predP.push({\n                        pred: prediction[i][j],\n                        targ: target[i][j]\n                    });\n                }\n            }\n        } else {\n            if (rows < 3 || rows !== columns) {\n                throw new Error('When \"all\" option is false, the prediction matrix must be square and have at least 3 columns');\n            }\n            for (var i = 0; i < rows - 1; i++) {\n                for (var j = i + 1; j < columns; j++) {\n                    predP.push({\n                        pred: prediction[i][j],\n                        targ: target[i][j]\n                    });\n                }\n            }\n        }\n\n        if (isDistance) {\n            predP.sort((a, b) => a.pred - b.pred);\n        } else {\n            predP.sort((a, b) => b.pred - a.pred);\n        }\n        \n        const cutoffs = this.cutoffs = [isDistance ? Number.MIN_VALUE : Number.MAX_VALUE];\n        const fp = this.fp = [0];\n        const tp = this.tp = [0];\n\n        var nPos = 0;\n        var nNeg = 0;\n\n        var currentPred = predP[0].pred;\n        var nTp = 0;\n        var nFp = 0;\n        for (var i = 0; i < predP.length; i++) {\n            if (predP[i].pred !== currentPred) {\n                cutoffs.push(currentPred);\n                fp.push(nFp);\n                tp.push(nTp);\n                currentPred = predP[i].pred;\n            }\n            if (predP[i].targ) {\n                nPos++;\n                nTp++;\n            } else {\n                nNeg++;\n                nFp++;\n            }\n        }\n        cutoffs.push(currentPred);\n        fp.push(nFp);\n        tp.push(nTp);\n\n        const l = cutoffs.length;\n        const fn = this.fn = new Array(l);\n        const tn = this.tn = new Array(l);\n        const nPosPred = this.nPosPred = new Array(l);\n        const nNegPred = this.nNegPred = new Array(l);\n\n        for (var i = 0; i < l; i++) {\n            fn[i] = nPos - tp[i];\n            tn[i] = nNeg - fp[i];\n\n            nPosPred[i] = tp[i] + fp[i];\n            nNegPred[i] = tn[i] + fn[i];\n        }\n\n        this.nPos = nPos;\n        this.nNeg = nNeg;\n        this.nSamples = nPos + nNeg;\n    }\n\n    /**\n     * Computes a measure from the prediction object.\n     *\n     * Many measures are available and can be combined :\n     * To create a ROC curve, you need fpr and tpr\n     * To create a DET curve, you need fnr and fpr\n     * To create a Lift chart, you need rpp and lift\n     *\n     * Possible measures are : threshold (Threshold), acc (Accuracy), err (Error rate),\n     * fpr (False positive rate), tpr (True positive rate), fnr (False negative rate), tnr (True negative rate), ppv (Positive predictive value),\n     * npv (Negative predictive value), pcfall (Prediction-conditioned fallout), pcmiss (Prediction-conditioned miss), lift (Lift value), rpp (Rate of positive predictions), rnp (Rate of negative predictions)\n     *\n     * @param measure - The short name of the measure\n     *\n     * @return [number]\n     */\n    getMeasure(measure) {\n        if (typeof measure !== 'string') {\n            throw new Error('No measure specified');\n        }\n        if (!measures[measure]) {\n            throw new Error(`The specified measure (${measure}) does not exist`);\n        }\n        return measures[measure](this);\n    }\n\n    /**\n     * Returns the area under the ROC curve\n     */\n    getAURC() {\n        const l = this.cutoffs.length;\n        const x = new Array(l);\n        const y = new Array(l);\n        for (var i = 0; i < l; i++) {\n            x[i] = this.fp[i] / this.nNeg;\n            y[i] = this.tp[i] / this.nPos;\n        }\n        var auc = 0;\n        for (i = 1; i < l; i++) {\n            auc += 0.5 * (x[i] - x[i - 1]) * (y[i] + y[i - 1]);\n        }\n        return auc;\n    }\n\n    /**\n     * Returns the area under the DET curve\n     */\n    getAUDC() {\n        const l = this.cutoffs.length;\n        const x = new Array(l);\n        const y = new Array(l);\n        for (var i = 0; i < l; i++) {\n            x[i] = this.fn[i] / this.nPos;\n            y[i] = this.fp[i] / this.nNeg;\n        }\n        var auc = 0;\n        for (i = 1; i < l; i++) {\n            auc += 0.5 * (x[i] + x[i - 1]) * (y[i] - y[i - 1]);\n        }\n        return auc;\n    }\n\n    getDistribution(options) {\n        options = options || {};\n        var cutLength = this.cutoffs.length;\n        var cutLow = options.xMin || Math.floor(this.cutoffs[cutLength - 1] * 100) / 100;\n        var cutHigh = options.xMax || Math.ceil(this.cutoffs[1] * 100) / 100;\n        var interval = options.interval || Math.floor(((cutHigh - cutLow) / 20 * 10000000) - 1) / 10000000; // Trick to avoid the precision problem of float numbers\n\n        var xLabels = [];\n        var interValues = [];\n        var intraValues = [];\n        var interCumPercent = [];\n        var intraCumPercent = [];\n\n        var nTP = this.tp[cutLength - 1], currentTP = 0;\n        var nFP = this.fp[cutLength - 1], currentFP = 0;\n\n        for (var i = cutLow, j = (cutLength - 1); i <= cutHigh; i += interval) {\n            while (this.cutoffs[j] < i)\n                j--;\n\n            xLabels.push(i);\n\n            var thisTP = nTP - currentTP - this.tp[j];\n            var thisFP = nFP - currentFP - this.fp[j];\n\n            currentTP += thisTP;\n            currentFP += thisFP;\n\n            interValues.push(thisFP);\n            intraValues.push(thisTP);\n\n            interCumPercent.push(100 - (nFP - this.fp[j]) / nFP * 100);\n            intraCumPercent.push(100 - (nTP - this.tp[j]) / nTP * 100);\n        }\n\n        return {\n            xLabels: xLabels,\n            interValues: interValues,\n            intraValues: intraValues,\n            interCumPercent: interCumPercent,\n            intraCumPercent: intraCumPercent\n        };\n    }\n}\n\nPerformance.names = {\n    acc: 'Accuracy',\n    err: 'Error rate',\n    fpr: 'False positive rate',\n    tpr: 'True positive rate',\n    fnr: 'False negative rate',\n    tnr: 'True negative rate',\n    ppv: 'Positive predictive value',\n    npv: 'Negative predictive value',\n    pcfall: 'Prediction-conditioned fallout',\n    pcmiss: 'Prediction-conditioned miss',\n    lift: 'Lift value',\n    rpp: 'Rate of positive predictions',\n    rnp: 'Rate of negative predictions',\n    threshold: 'Threshold'\n};\n\nmodule.exports = Performance;\n"},"lineCount":228}},"hash":"05f5b7d1e25595fe6df0f69bd138abe2","cacheData":{"env":{}}}